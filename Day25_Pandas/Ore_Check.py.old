from Request_Get import Get_Request
import pprint

LOCATIONS=["Bridgewatch","Lymhurst","Fort Sterling","Thetford","Martlock"]

# import os #HINT: Clearing the Screen  os.system('cls')

# os.system('cls')

#--------------Function definitions--------------------
def best_trip(min_max_dic):
    max_profit=0
    city_min=""
    city_max=""
    best_item=""
    instances=[]
    
    for item in min_max_dic:
        
        if min_max_dic[item]["profit"]>max_profit:
            max_profit=min_max_dic[item]["profit"]
            city_min=min_max_dic[item]["city_min"]
            city_max=min_max_dic[item]["city_max"]
            price_min=min_max_dic[item]["value_min"]
            price_max=min_max_dic[item]["value_max"]
            best_item=item
            instances.append(f"{best_item}: {city_min}({price_min})->{city_max}({price_max}): profit={max_profit}")

    
    for i in range (1,5):
        print(f"place {i} = {instances[-i]}")


def Min_Max(parsed_request):
    item_min_max={}
    for item in parsed_request:
        max_value=0
        city_max=""
        min_value=9999999999999
        city_min=""

        for city in parsed_request[item]:
            if parsed_request[item][city]>max_value:
                max_value=parsed_request[item][city]
                city_max=city
        
            if parsed_request[item][city]<min_value and parsed_request[item][city]!=0:
                min_value=parsed_request[item][city]
                city_min=city
        item_min_max[item]={}    
        item_min_max[item]["city_min"]=city_min
        item_min_max[item]["city_max"]=city_max
        item_min_max[item]["value_min"]=min_value
        item_min_max[item]["value_max"]=max_value
        item_min_max[item]["profit"]= max_value-min_value

    return item_min_max
    
def parse_request(input_item_list_dic,item_list):
    all_prices={}
    item_value_dic={}
    for item in item_list:
        for item_data in input_item_list_dic:
            
            if item_data["item_id"]== item:
                current_value=item_data["sell_price_min"]
                current_city=item_data["city"]
                item_value_dic[current_city]=current_value
        all_prices[item]=item_value_dic        
        item_value_dic={}

    return all_prices

def make_request(item_list):
    all_items=""
    location_constructor=f"locations={LOCATIONS[0]},{LOCATIONS[1]},{LOCATIONS[2]},{LOCATIONS[3]},{LOCATIONS[4]}"
    for item in item_list:
        all_items=all_items +"," +item
    item_constructor=f"{all_items}.json?"   
    endpoint = "stats/prices/"+item_constructor+location_constructor+"&qualities=1"
    response= Get_Request(endpoint)
    return response

def digest_txt():
    file = open(".\Day25_Pandas\\Ores.txt")
    raw_file = file.read()
    file_list = raw_file.split()
    file.close()
    return file_list

def route_dic_create():
    pass

item_list = digest_txt()
parsed_request=parse_request(make_request(item_list),item_list)

#--------------------Debug--------------------------
# pprint.pprint(make_request(item_list), depth=100)
#/--------------------Debug--------------------------
 
best_trip(Min_Max(parsed_request)) 

